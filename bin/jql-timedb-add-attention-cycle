#! /usr/local/bin/python3
"""
For jql time management schema

* takes the currently selected row from _nouns_ table
* creates a tree of attention cycle tasks in the active (or pending)
  root task
* the algorithm will construct a tree to organize cycles like so
  * find the lowest attention cycle to which this noun belongs
  * add the attention cycle for this task
  * group related tasks within this new parent
  * group related = find any strict subset of tasks that have another
    common ancestor and put them into an attention cycle for the
    highest such ancestor
  * note we don't recursively group related within our children as doing
    so shouldn't have any effect (we haven't formally proven this)
"""

import json
import sys

from timedb.cycles import CycleManager

def main():
    iface = json.load(sys.stdin)
    snapshot = json.loads(iface["snapshot"])
    current_view = iface["current_view"]
    selected_table = current_view["table"]
    pk = current_view["primary_selection"]
    cm = CycleManager(snapshot)
    if selected_table != "nouns":
        raise ValueError("must select noun to add an attention cycle")
    cm.add_cycle_for(pk)
    iface["snapshot"] = json.dumps(snapshot)
    json.dump(iface, sys.stdout)


if __name__ == "__main__":
    main()

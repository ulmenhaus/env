#! /usr/local/bin/python3

import json
import os

import click
import tabulate


class ProjectManager(object):
    def __init__(self, path="~/.projects.json", project=""):
        self.path = os.path.expanduser(path)
        self.project = project
        with open(self.path) as f:
            self._cache = json.load(f)

    def new_project(self, workdir):
        reldir = os.path.abspath(workdir).replace(os.path.expanduser("~"), "~")
        self._cache["projects"][self.project] = {
            "workdir": reldir,
            "bookmarks": {},
            "commands": [],
            "tags": [],
        }
        self._save_cache()

    def list_projects(self):
        table = [[
            name,
            project["workdir"],
            "{} bookmarks".format(len(project["bookmarks"])),
            "{} commands".format(len(project["commands"])),
            " ".join(project["tags"]),
        ] for name, project in self._cache["projects"].items()]
        print(tabulate.tabulate(table))

    def add_bookmark(self, path, point):
        project = self._cache["projects"][self.project]
        project["bookmarks"][self._key_for_bookmark(path, point)] = {}
        self._save_cache()

    def _key_for_bookmark(self, path, point):
        project = self._cache["projects"][self.project]
        projdir = os.path.abspath(os.path.expanduser(project["workdir"]))
        relpath = os.path.abspath(path)[len(projdir) + 1:]
        return "{}#{}".format(relpath, point)

    def _save_cache(self):
        with open(self.path, 'w') as f:
            json.dump(self._cache, f)


@click.group()
def cli():
    pass


def main():
    @cli.group(name='project')
    def project_group():
        pass

    @cli.group(name='bookmark')
    def bookmark_group():
        pass

    pm = ProjectManager(project=os.environ["TMUX_WINDOW_NAME"])

    @click.argument('workdir', type=click.STRING)
    def new(workdir):
        return pm.new_project(workdir)

    def ls():
        return pm.list_projects()

    project_group.command()(new)
    project_group.command()(ls)

    @click.argument('path', type=click.STRING)
    @click.argument('point', type=click.STRING)
    def add(path, point):
        return pm.add_bookmark(path, point)

    @click.argument('path', type=click.STRING)
    @click.argument('point', type=click.STRING)
    def rm(path, point):
        return pm.remove_bookmark(path, point)

    bookmark_group.command()(add)
    bookmark_group.command()(rm)

    cli(obj={})


if __name__ == "__main__":
    main()

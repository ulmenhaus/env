#! /usr/local/bin/python3
"""
For jql time management schema

* takes the currently selected row and sets its pk
* updates pks that reference this one
"""

import json
import sys

from jql import macro
from timedb import pks


def pk_for_file(f):
    if f['A Type'] == "blob":
        return "/".join([f['A Type'] + "s", f['Xtended Name']])
    return "/".join([f['A Type'] + "s", f['Project'], f['Xtended Name']])


def main_v2():
    with macro.macro_interface(sys.stdin, sys.stdout) as iface:
        dbms = iface.get_dbms()
        table, pk = iface.get_primary_selection()
        setter = pks.PKSetter(dbms)
        setter.update(table, pk)

def main():
    if "--v2" in sys.argv:
        # TODO once the daemonized macro interface is fully implemented we
        # can deprecate the old v1 flow for this
        return main_v2()
    iface = json.load(sys.stdin)
    snapshot = json.loads(iface["snapshot"])
    current_view = iface["current_view"]
    selected_table = current_view["table"]
    pk = current_view["primary_selection"]
    tdb = pks.TimeDB(snapshot)
    if selected_table == "tasks":
        task = snapshot["tasks"][pk]
        tdb.update_task_pk(pk, pks.pk_for_task(task, snapshot['actions']))
    elif selected_table == "files":
        tdb.update_files_pk(pk, pk_for_file(snapshot['files'][pk]))
    elif selected_table == "nouns":
        tdb.update_noun(pk)
    else:
        raise ValueError("PK not implemented for table", selected_table)
    iface["snapshot"] = json.dumps(snapshot)
    json.dump(iface, sys.stdout)


if __name__ == "__main__":
    main()

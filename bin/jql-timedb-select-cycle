#! /usr/local/bin/python3
"""
For jql time management schema

Macro will auto-jump your view to a given attention cycle
* by default goes to the current active cycle
* adding --pending will go to the current pending cycle
* adding --for <noun> will go to the cycle for a given noun (not implemented)
"""

import datetime
import json
import sys

from timedb import pks


def find_active_root_cycle(snapshot):
    for pk, task in snapshot['tasks'].items():
        if task['Action'] == "Accomplish" and task[
                'Direct'] == "set goals" and task['Status'] == "Habitual":
            return pk


def find_pending_root_cycle(snapshot):
    for pk, task in snapshot['tasks'].items():
        if task['Action'] == "Accomplish" and task[
                'Direct'] == "set goals" and task['Status'] == "Pending":
            return pk


def create_ideation_task(snapshot, idea_pk):
    # find the nearest ancestor which has an attention cycle
    visited = set()
    nouns, tasks = snapshot['nouns'], snapshot['tasks']
    noun = nouns[idea_pk]['Parent']
    active_cycles = {
        task['Indirect']: task_pk
        for task_pk, task in snapshot['tasks'].items()
        if task['Status'] == 'Habitual' and task['Action'] == 'Attend'
    }
    parent = ""
    while True:
        if noun in visited:
            raise ValueError("cycle detected")
        visited.add(noun)
        if noun in active_cycles:
            parent = active_cycles[noun]
            break
        noun = nouns[noun]['Parent']
    action_map = {
        'Idea': 'Ideate',
        'Exploring': 'Explore',
    }
    task = {
        "Action": action_map.get(nouns[idea_pk]['Status'], 'Plan'),
        'Direct': idea_pk,
        "Indirect": '',
        'Parameters': '',
        # NOTE Assuming we want fine-grained timestamps here so selecting today's
        # date but an alternative would be to inherit the span and start from the parent
        "Param~Span": "Day",
        "Param~Start":
        (datetime.date.today() - datetime.date(1970, 1, 1)).days,
        "Primary Goal": parent,
        "Status": "Active",
    }
    pk = pks.pk_for_task(task, snapshot['actions'])
    tasks[pk] = task
    return pk


def main():
    iface = json.load(sys.stdin)
    field = "Primary Goal"
    table = "tasks"
    changed = False
    order_by = ""
    order_dec = False
    if "--pending" in sys.argv:
        snapshot = json.loads(iface["snapshot"])
        formatted = find_pending_root_cycle(snapshot)
    elif "--sources" in sys.argv:
        table = "nouns"
        field = "Relation"
        formatted = "Source"
    elif "--ideate" in sys.argv:
        formatted = iface['current_view']['primary_selection']
        snapshot = json.loads(iface["snapshot"])
        create_ideation_task(snapshot, formatted)
        table = "tasks"
        field = "Direct"
        changed = True
        order_by = "Param~Start"
        order_dec = True
    elif "--ideas" in sys.argv:
        table = "vt.ideas"
        field = "Idea"
        formatted = iface['current_view']['primary_selection']
    elif "--relatives" in sys.argv:
        table = "vt.relatives"
        field = "-> Item"
        current_table = iface['current_view']['table']
        selection = iface['current_view']['primary_selection']
        if current_table in ['nouns', 'tasks']:
            formatted = f"{current_table} {selection}"
        elif current_table.startswith('vt.'):
            formatted = selection.split("\t")[0]
    elif "--habituals" in sys.argv:
        table = "vt.habituals"
        field = "Habitual"
        formatted = iface['current_view']['primary_selection']
    elif "--for" in sys.argv:
        raise NotImplementedError("--for flag not yet implemented")
    else:
        snapshot = json.loads(iface["snapshot"])
        formatted = find_active_root_cycle(snapshot)
    current_view = iface["current_view"]
    current_view['table'] = table
    if field:
        current_view['filter'] = {
            "field": field,
            "formatted": formatted,
        }
    current_view['order_by'] = order_by
    current_view['order_dec'] = order_dec
    if changed:
        iface['snapshot'] = json.dumps(snapshot)
    json.dump(iface, sys.stdout)


if __name__ == "__main__":
    main()

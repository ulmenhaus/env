#! /usr/local/bin/python3
"""
For jql concept management schema

Provide the values of an entry based on the last successful iteration
"""

import os
import subprocess
import sys
import tempfile

from jql import jql_pb2, macro
from timedb import cycles, pks, schema

from timedb.virtual_gateway import common


def _populate_from_last_successful(dbms, task_pk):
    previous_task = _get_last_successful_task(dbms, task_pk)
    _copy_attributes(dbms, previous_task, task_pk)


def _get_last_successful_task(dbms, task_pk):
    task = dbms.GetRow(
        jql_pb2.GetRowRequest(table=schema.Tables.Tasks, pk=task_pk))
    primary, cmap = common.list_rows_meta(task)
    action = task.row.entries[cmap[schema.Fields.Action]].formatted
    direct = task.row.entries[cmap[schema.Fields.Direct]].formatted
    indirect = task.row.entries[cmap[schema.Fields.Indirect]].formatted
    previous = dbms.ListRows(
        jql_pb2.ListRowsRequest(
            table=schema.Tables.Tasks,
            conditions=[
                jql_pb2.Condition(requires=[
                    jql_pb2.Filter(
                        column=schema.Fields.Action,
                        equal_match=jql_pb2.EqualMatch(value=action),
                    ),
                    jql_pb2.Filter(
                        column=schema.Fields.Direct,
                        equal_match=jql_pb2.EqualMatch(value=direct),
                    ),
                    jql_pb2.Filter(
                        column=schema.Fields.Indirect,
                        equal_match=jql_pb2.EqualMatch(value=indirect),
                    ),
                    jql_pb2.Filter(
                        column=schema.Fields.Status,
                        equal_match=jql_pb2.EqualMatch(
                            value=schema.Values.StatusSatisfied),
                    ),
                ]),
            ],
            order_by=schema.Fields.ParamStart,
            dec=True,
            limit=1))
    if len(previous.rows) != 1:
        raise ValueError("No previous task found", len(previous.rows))
    return previous.rows[0].entries[primary].formatted


def _copy_attributes(dbms, src_task, tgt_task):
    full_src = common.full_pk(schema.Tables.Tasks, src_task)
    full_tgt = common.full_pk(schema.Tables.Tasks, tgt_task)
    all_attributes, _ = common.get_fields_for_items(dbms, "",
                                                    [full_src, full_tgt])
    src_attributes = all_attributes[full_src]
    tgt_attributes = all_attributes[full_tgt]
    # We don't want to overwrite attributes that were previously set, only the delta
    delta = set(src_attributes) - set(tgt_attributes)
    for key in delta:
        for i, attr in enumerate(src_attributes[key]):
            fields = {
                schema.Fields.Arg0: full_tgt,
                schema.Fields.Arg1: attr,
                schema.Fields.Relation: f".{key}",
                schema.Fields.Order: str(i),
            }
            pk = pks.pk_for_assertion(fields)
            dbms.WriteRow(
                jql_pb2.WriteRowRequest(
                    pk=pk,
                    table=schema.Tables.Assertions,
                    fields=fields,
                    insert_only=True,
                ))


def main():
    with macro.macro_interface(sys.stdin, sys.stdout) as iface:
        dbms = iface.get_dbms()
        table, pk = iface.get_primary_selection()
        if table == schema.Tables.Relatives:
            arg0_pk, _ = common.decode_pk(pk)
            ref_table, ref_pk = common.parse_full_pk(arg0_pk)
            if ref_table != schema.Tables.Tasks:
                raise ValueError("Macro only works for tasks table", ref_table)
            _populate_from_last_successful(dbms, ref_pk)
        else:
            raise ValueError("Please run this macro from vt.relatives")


if __name__ == "__main__":
    main()

#! /usr/local/bin/python3

import datetime
import json
import sys

from timedb.pks import pk_for_task


class HabitModes(object):

    def __init__(self, data):
        self.data = data
        self.task_pk = None
        self.task_data = None

    def breakdown(self,
                  level=1,
                  depth=1,
                  cap=None,
                  order='lexical',
                  implements='',
                  cls=''):
        if level > 1:
            raise ValueError(
                "starting level greater than one not yet supported")
        if depth > 1:
            raise ValueError("depth greater than one not yet supported")
        if order != 'lexical':
            raise ValueError("ordering other than lexical not yet supported")
        action = self.task_data['Action']
        direct = self.task_data['Direct']
        sources = [direct]
        if cls != '':
            # Instead of getting the breakdown from the object itself we get it from
            # any object matching the provided class
            sources = [
                assertion["Arg0"][len("nouns "):]
                for assertion in self.data['assertions'].values()
                if assertion["A Relation"] == '.Class'
                and assertion['Arg1'] == f"@{{nouns {cls}}}"
            ]

        original_span = self.task_data["Param~Span"]
        original_date = datetime.datetime(1970, 1, 1) + datetime.timedelta(
            days=int(self.task_data["Param~Start"]))
        original_stamp = original_date.strftime("%d %b %Y")
        parts = sorted([
            item_pk for item_pk, item_data in self.data['nouns'].items()
            if item_data['Parent'] in sources
            and item_data['Relation'] != 'Feature'
            and (item_data['Status'] == 'Implementing' or cls == '') # for class-based sources we only want to get curated (active) items
        ])
        if cls != '':
            # Mark these nouns as revisit here so they don't pop up in a future
            # class-consuming habit. Ideally at the end of each cycle you can
            # look through tasks marked revisit and decide if satisfied or not
            for part in parts:
                self.data["nouns"][part]['Status'] = 'Revisit'
        already_done = [
            task['Direct'] for task in self.data["tasks"].values()
            if task["Primary Goal"] == self.task_pk
            and task["Status"] == "Satisfied" and task["Action"] == action
        ]
        start_point = 0
        for pk in already_done:
            if pk in parts:
                start_point = max(start_point, already_done.index(pk) + 1)

        cap = cap or len(parts)
        to_add = parts[start_point:start_point + cap]
        already_added = [
            task['Direct'] for task in self.data["tasks"].values()
            if task["Primary Goal"] == self.task_pk and task["Status"] in (
                "Pending", "Planned", "Active") and task["Action"] == action
        ]
        delta = set(to_add) - set(already_added)
        for direct in delta:
            new_task = self._new_task(
                action=action,
                direct=direct,
                param_date=self.task_data["Param~Start"],
                param_time=original_span,
                primary_goal=self.task_pk,
                status="Pending" if implements else "Active",
            )
            new_pk = pk_for_task(new_task, self.data['actions'])
            self.data["tasks"][new_pk] = new_task
            if not implements:
                continue
            new_assertion = {
                'A Relation': ".Implements",
                "Arg0": f"tasks {new_pk}",
                "Arg1": implements,
                "Order": 0,
            }
            assn_pk = str((".Implements", f"tasks {new_pk}", implements, 0))
            self.data["assertions"][assn_pk] = new_assertion

    def regularity(self, freq=1, span='Day', sched=None, indirect=''):
        today = datetime.date.today()
        if sched is not None and span == 'Day' and today.strftime(
                "%a") not in sched:
            return

        action = self.task_data["Action"]
        direct = self.task_data["Direct"]
        primary_goal = self.task_pk

        datep = datetime.date.today()
        if span == 'Week':
            datep = datep - datetime.timedelta(days=int(datep.strftime("%w")))
        if span == 'Month':
            if sched is not None:
                datep = datep + datetime.timedelta(days=int(sched) - datep.day)
            else:
                datep = datep - datetime.timedelta(days=datep.day - 1)
        datep_stamp = datep.strftime("%d %b %Y")
        if span != 'Day':
            datep_stamp = "{} of {}".format(span, datep_stamp)

        for i in range(freq):
            params = "{} of {}".format(i + 1, freq)
            params_suffix = ", {}".format(params)
            if freq == 1:
                params = ""
                params_suffix = ""
            task = self._new_task(
                action=action,
                direct=direct,
                indirect=indirect,
                param_date=(datep - datetime.date(1970, 1, 1)).days,
                param_time=span,
                params=params,
                primary_goal=primary_goal,
                status='Active' if span == 'Day' else 'Planned',
            )
            pk = pk_for_task(task, self.data['actions'])
            if pk not in self.data["tasks"]:
                self.data["tasks"][pk] = task

    def continuity(self, implements='', indirect=''):
        action = self.task_data["Action"]
        direct = self.task_data["Direct"]
        primary_goal = self.task_pk

        task = self._new_task(
            action=action,
            direct=direct,
            indirect=indirect,
            param_date=self.task_data["Param~Start"],
            param_time=self.task_data["Param~Span"],
            primary_goal=primary_goal,
            status='Pending',
        )
        pk = pk_for_task(task, self.data['actions'])
        if pk in self.data["tasks"]:
            return
        self.data["tasks"][pk] = task
        if not implements:
            return
        new_assertion = {
            'A Relation': ".Implements",
            "Arg0": f"tasks {pk}",
            "Arg1": implements,
            "Order": 0,
        }
        pk = str((".Implements", f"tasks {pk}", implements, 0))
        self.data["assertions"][pk] = new_assertion

    def incrementality(self,
                       start=0,
                       end=0,
                       delta=1,
                       success=1,
                       fmt="{cur}",
                       fail=None,
                       sched=None):
        today = datetime.date.today()
        if sched is not None and today.strftime("%a") not in sched:
            return
        param_date = (datetime.date.today() - datetime.date(1970, 1, 1)).days
        previous_tasks = [(task_pk, task_data)
                          for task_pk, task_data in self.data["tasks"].items()
                          if task_data["Primary Goal"] == self.task_pk]
        ordered = sorted(previous_tasks,
                         key=lambda task: -task[1]["Param~Start"])
        param = start
        # TODO this assumes current is separated by spaces but turning it into a
        # regexp would be a better approach
        curr_index = fmt.split(" ").index("{cur}")
        get_param = lambda task_data: int(task_data["Parameters"].split(" ")[
            curr_index])
        if ordered:
            current = get_param(ordered[0][1])
            param = current
            successes = 0
            failures = 0
            for task_pk, task_data in ordered:
                task_param = get_param(task_data)
                if task_param != current:
                    break
                if task_data["Status"] == "Satisfied":
                    successes += 1
                if task_data["Status"] == "Failed" and successes == 0:
                    failures += 1
            if successes >= success:
                param = current + delta
            if fail and failures >= fail:
                param = current - delta
        if ((param > end) and (delta > 0)) or ((param < end) and (delta < 0)):
            return
        params = fmt.format(start=start, cur=param, end=end)
        action = self.task_data["Action"]
        direct = self.task_data["Direct"]
        task = self._new_task(
            action=action,
            direct=direct,
            param_date=param_date,
            param_time='Day',
            params=params,
            primary_goal=self.task_pk,
        )
        pk = pk_for_task(task, self.data['actions'])
        if pk not in self.data["tasks"]:
            self.data["tasks"][pk] = task

    def _new_task(self,
                  action='',
                  direct='',
                  indirect='',
                  param_date=0,
                  param_time='',
                  params='',
                  primary_goal='',
                  status='Active'):
        return {
            "Action": action,
            "Direct": direct,
            "Indirect": indirect,
            "Param~Start": param_date,
            "Param~Span": param_time,
            "Parameters": params,
            "Primary Goal": primary_goal,
            "Status": status,
        }

    def locals(self):
        return {
            'breakdown': self.breakdown,
            'regularity': self.regularity,
            'incrementality': self.incrementality,
            'continuity': self.continuity,
        }

    def globals(self):
        return {
            'lexical': 'lexical',
            'day': 'Day',
            'week': 'Week',
            'month': 'Month',
        }


def main():
    iface = json.load(sys.stdin)
    snapshot = json.loads(iface["snapshot"])

    modes = HabitModes(snapshot)
    locs = modes.locals()
    globs = modes.globals()
    task_snapshot = list(snapshot['tasks'].items())
    for task_pk, task_data in task_snapshot:
        modes.task_pk = task_pk
        modes.task_data = task_data
        if task_data["Status"] not in ("Habitual", "Active"):
            continue
        indirect = task_data["Indirect"]
        if indirect in locs:
            eval("{}({})".format(indirect, task_data['Parameters']), locs,
                 globs)
    iface["snapshot"] = json.dumps(snapshot)
    json.dump(iface, sys.stdout)


if __name__ == "__main__":
    main()

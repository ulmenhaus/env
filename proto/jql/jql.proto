syntax = "proto3";

option go_package = "jql/jqlpb";

package jql;

service JQL {
	rpc ListTables (ListTablesRequest) returns (ListTablesResponse);
	rpc ListRows (ListRowsRequest) returns (ListRowsResponse);
	rpc GetRow (GetRowRequest) returns (GetRowResponse);
  rpc WriteRow (WriteRowRequest) returns (WriteRowResponse);
	rpc DeleteRow (DeleteRowRequest) returns (DeleteRowResponse);
	rpc IncrementEntry (IncrementEntryRequest) returns (IncrementEntryResponse);
	rpc Persist (PersistRequest) returns (PersistResponse);
	rpc GetSnapshot(GetSnapshotRequest) returns (GetSnapshotResponse);
	rpc LoadSnapshot(LoadSnapshotRequest) returns (LoadSnapshotResponse);
}

message ListTablesRequest {}

message TableMeta {
	string name = 1;
	repeated Column columns = 2;
}

message ListTablesResponse {
	repeated TableMeta tables = 1;
}

message EqualMatch {
	string value = 1;
}

message LessThanMatch {
	string value = 1;
}

message GreaterThanMatch {
	string value = 1;
}

message InMatch {
	repeated string values = 1;
}

message ContainsMatch {
	bool exact = 1;
	string value = 2;
}
	
message PathToMatch {
	string value = 1;
	bool reverse = 2;
}

message Filter {
	bool negated = 1;
	string column = 2;
	oneof match {
		EqualMatch equal_match = 3;
		LessThanMatch less_than_match = 4;
		GreaterThanMatch greather_than_match = 5;
		InMatch in_match = 6;
		ContainsMatch contains_match = 7;
		PathToMatch path_to_match = 8;
	}
}

message Condition {
	repeated Filter requires = 1;
}

message ListRowsRequest {
	string table = 1;
	// Use DNF for maximum expressibility. Filtering is an or clause
	// of and clauses made up of primitive filters.
	repeated Condition conditions = 2;
	string order_by = 3;
	bool dec = 4;
	uint32 offset = 5;
	uint32 limit = 6;
}

enum EntryType {
	STRING = 0;
	INT = 1;
	DATE = 2;
	ENUM = 3;
	ID = 4;
	TIME = 5;
	MONEYAMT = 6;
	FOREIGN = 7;
	FOREIGNS = 8;
}

message Column {
	string name = 1;
	EntryType type = 2;
	int32 max_length = 3;
	bool primary = 4;

	// Type-specific fields
	string foreign_table = 5;
	repeated string values = 6;
}

message Entry {
	string formatted = 1;
}

message Row {
	repeated Entry entries = 1;
}

message ListRowsResponse {
	string table = 1;
	repeated Column columns = 2;
	repeated Row rows = 3;
	uint32 total = 4;
	uint32 all = 5;
}

message GetRowRequest {
	string table = 1;
	string pk = 2;
}

message GetRowResponse {
	string table = 1;
	repeated Column columns = 2;
	Row row = 3;
}

message WriteRowRequest {
	string table = 1;
	string pk = 2;
	map<string, string> fields = 3;
	bool update_only = 4;
	bool insert_only = 5;
}

message WriteRowResponse {}

message IncrementEntryRequest {
	string table = 1;
	string pk = 2;
	string column = 3;
	int32 amount = 4;
}

message IncrementEntryResponse {
}

message DeleteRowRequest {
	string table = 1;
	string pk = 2;
}

message DeleteRowResponse {}

message PersistRequest {}

message PersistResponse {}

message GetSnapshotRequest {}

message GetSnapshotResponse {
	bytes snapshot = 1;
}

message LoadSnapshotRequest {
	bytes snapshot = 1;
}

message LoadSnapshotResponse {}

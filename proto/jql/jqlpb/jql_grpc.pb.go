// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: jql/jql.proto

package jqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JQL_ListEntries_FullMethodName = "/jql.JQL/ListEntries"
	JQL_GetEntry_FullMethodName    = "/jql.JQL/GetEntry"
	JQL_WriteEntry_FullMethodName  = "/jql.JQL/WriteEntry"
	JQL_DeleteEntry_FullMethodName = "/jql.JQL/DeleteEntry"
	JQL_Persist_FullMethodName     = "/jql.JQL/Persist"
)

// JQLClient is the client API for JQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JQLClient interface {
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	WriteEntry(ctx context.Context, in *WriteEntryRequest, opts ...grpc.CallOption) (*WriteEntryResponse, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	Persist(ctx context.Context, in *PersistRequest, opts ...grpc.CallOption) (*PersistResponse, error)
}

type jQLClient struct {
	cc grpc.ClientConnInterface
}

func NewJQLClient(cc grpc.ClientConnInterface) JQLClient {
	return &jQLClient{cc}
}

func (c *jQLClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, JQL_ListEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jQLClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, JQL_GetEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jQLClient) WriteEntry(ctx context.Context, in *WriteEntryRequest, opts ...grpc.CallOption) (*WriteEntryResponse, error) {
	out := new(WriteEntryResponse)
	err := c.cc.Invoke(ctx, JQL_WriteEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jQLClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	out := new(DeleteEntryResponse)
	err := c.cc.Invoke(ctx, JQL_DeleteEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jQLClient) Persist(ctx context.Context, in *PersistRequest, opts ...grpc.CallOption) (*PersistResponse, error) {
	out := new(PersistResponse)
	err := c.cc.Invoke(ctx, JQL_Persist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JQLServer is the server API for JQL service.
// All implementations must embed UnimplementedJQLServer
// for forward compatibility
type JQLServer interface {
	ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	WriteEntry(context.Context, *WriteEntryRequest) (*WriteEntryResponse, error)
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	Persist(context.Context, *PersistRequest) (*PersistResponse, error)
	mustEmbedUnimplementedJQLServer()
}

// UnimplementedJQLServer must be embedded to have forward compatible implementations.
type UnimplementedJQLServer struct {
}

func (UnimplementedJQLServer) ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedJQLServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedJQLServer) WriteEntry(context.Context, *WriteEntryRequest) (*WriteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteEntry not implemented")
}
func (UnimplementedJQLServer) DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedJQLServer) Persist(context.Context, *PersistRequest) (*PersistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Persist not implemented")
}
func (UnimplementedJQLServer) mustEmbedUnimplementedJQLServer() {}

// UnsafeJQLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JQLServer will
// result in compilation errors.
type UnsafeJQLServer interface {
	mustEmbedUnimplementedJQLServer()
}

func RegisterJQLServer(s grpc.ServiceRegistrar, srv JQLServer) {
	s.RegisterService(&JQL_ServiceDesc, srv)
}

func _JQL_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JQLServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JQL_ListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JQLServer).ListEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JQL_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JQLServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JQL_GetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JQLServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JQL_WriteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JQLServer).WriteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JQL_WriteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JQLServer).WriteEntry(ctx, req.(*WriteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JQL_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JQLServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JQL_DeleteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JQLServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JQL_Persist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JQLServer).Persist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JQL_Persist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JQLServer).Persist(ctx, req.(*PersistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JQL_ServiceDesc is the grpc.ServiceDesc for JQL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JQL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jql.JQL",
	HandlerType: (*JQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEntries",
			Handler:    _JQL_ListEntries_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _JQL_GetEntry_Handler,
		},
		{
			MethodName: "WriteEntry",
			Handler:    _JQL_WriteEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _JQL_DeleteEntry_Handler,
		},
		{
			MethodName: "Persist",
			Handler:    _JQL_Persist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jql/jql.proto",
}
